import os
import json
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.prompts import PromptTemplate
from config import GOOGLE_API_KEY
from PyPDF2 import PdfReader
import textwrap
import re
import textwrap

# ==========================================
# FUNCIONES DE UTILIDAD
# ==========================================

def extraer_texto_pdfs(carpeta: str) -> str:
    """Extrae y combina texto de todos los PDFs en una carpeta."""
    textos = []
    for archivo in os.listdir(carpeta):
        if archivo.lower().endswith(".pdf"):
            ruta_pdf = os.path.join(carpeta, archivo)
            print(f"üìÑ Extrayendo texto de: {archivo}")
            with open(ruta_pdf, "rb") as f:
                reader = PdfReader(f)
                texto = "".join([page.extract_text() or "" for page in reader.pages])
                textos.append(texto)
    return "\n".join(textos)



def dividir_en_chunks(texto: str, max_chars: int = 15000) -> list[str]:
    """
    Divide el texto en chunks manejables y marca secciones clave.
    - Detecta encabezados de "Solvencia t√©cnica" y "Solvencia econ√≥mica".
    - A√±ade meta-informaci√≥n del chunk para que Gemini sepa a qu√© secci√≥n pertenece.
    """

    # Normalizar saltos de l√≠nea y espacios
    texto = re.sub(r'\s+', ' ', texto).strip()

    # Buscar secciones
    secciones = []
    patron = re.compile(r"(Solvencia t√©cnica|Solvencia econ√≥mica)", re.IGNORECASE)
    matches = list(patron.finditer(texto))

    if matches:
        for i, m in enumerate(matches):
            inicio = m.start()
            fin = matches[i + 1].start() if i + 1 < len(matches) else len(texto)
            seccion_nombre = m.group(1).strip()
            seccion_texto = texto[inicio:fin].strip()
            secciones.append((seccion_nombre, seccion_texto))
    else:
        secciones.append(("general", texto))

    # Dividir cada secci√≥n en chunks de tama√±o max_chars
    chunks = []
    for nombre, contenido in secciones:
        subchunks = textwrap.wrap(contenido, max_chars)
        for sc in subchunks:
            # A√±adimos meta-informaci√≥n de la secci√≥n al chunk
            chunk_final = f"[Secci√≥n: {nombre}]\n{sc}"
            chunks.append(chunk_final)

    return chunks


def combinar_respuestas(respuestas: list[dict]) -> dict:
    """
    Combina varias respuestas parciales de los chunks en un √∫nico diccionario limpio.
    - Campos √∫nicos (expediente, cliente, fechas, dinero) ‚Üí primera respuesta v√°lida.
    - Campos extensos (pr√≥rroga, solvencia t√©cnica, solvencia econ√≥mica) ‚Üí concatenar y resumir.
    """
    resultado_final = {}

    campos_unicos = [
        "n√∫mero de expediente",
        "cliente (√≥rgano de contrataci√≥n)",
        "clasificaci√≥n cpv",
        "valor estimado del contrato (con y sin iva)",
        "plazo de presentaci√≥n de la oferta (fecha l√≠mite)"
        "esquema nacional de seguridad (si se exige, nivel requerido)"
    ]
    campos_extensos = [
        "criterios de valoraci√≥n",
        "resumen trabajos o servicios a contratar",
        "pr√≥rroga",
        "requisitos de solvencia t√©cnica",
        "acreditaci√≥n de solvencia t√©cnica",
        "requisitos de solvencia econ√≥mica",
        "acreditaci√≥n de solvencia econ√≥mica",
        "equipo de trabajo (n√∫mero de personas, requisitos, formaci√≥n, experiencia)",
        "acreditaci√≥n del equipo de trabajo (c√≥mo se debe demostrar el equipo de trabajo)"
    ]

    for campo in campos_unicos:
        for r in respuestas:
            if campo in r and r[campo]:
                resultado_final[campo] = r[campo]
                break

    for campo in campos_extensos:
        textos = []
        for r in respuestas:
            if campo in r and r[campo]:
                valor = r[campo]
                if isinstance(valor, str):
                    valor = valor.strip()
                    if valor and valor not in textos:
                        textos.append(valor)
                elif isinstance(valor, list):
                    textos.extend([str(v).strip() for v in valor if str(v).strip() not in textos])
                else:
                    textos.append(str(valor).strip())
        if textos:
            resultado_final[campo] = " / ".join(textos)

    return resultado_final


# ==========================================
# CONFIGURACI√ìN DEL MODELO
# ==========================================

llm = ChatGoogleGenerativeAI(
    model="gemini-2.5-flash",
    temperature=0,
    google_api_key=GOOGLE_API_KEY
)


# ==========================================
# PROMPTS
# ==========================================

# Prompt para cada chunk
prompt_template_chunk = PromptTemplate(
    input_variables=["document"],
    template=(
        "Analiza el siguiente texto de una licitaci√≥n p√∫blica y extrae en formato JSON los siguientes campos:\n"
        "- n√∫mero de expediente (obligatorio)\n"
        "- cliente (√≥rgano de contrataci√≥n) (obligatorio)\n"
        "- clasificaci√≥n CPV (obligatorio)\n"
        "- valor estimado del contrato (con y sin IVA, tambi√©n a√±adir si el contrato dura m√°s de un a√±o) (obligatorio)\n"
        "- plazo de presentaci√≥n de la oferta (fecha l√≠mite) (obligatorio)\n"
        "- criterios de valoraci√≥n (extrae los criterios con sus puntuaciones o porcentaj, si hay alguna f√≥rmula incluyela)(obligatorio)\n"
        "- resumen trabajos o servicios a contratar (obligatorio)\n"
        "- pr√≥rroga (si existe, duraci√≥n)\n"
        "- requisitos de solvencia t√©cnica (resumir experiencia, formaci√≥n, medios humanos y materiales)(obligatorio)\n"
        "- acreditaci√≥n de solvencia t√©cnica (como se debe demostrar la solvencia t√©cnica)(obligatorio)\n"
        "- requisitos de solvencia econ√≥mica (resumir, incluyendo c√≥mo se acredita)(obligatorio)\n"
        "- acreditaci√≥n de solvencia econ√≥mica (como se debe demostrar la solvencia econ√≥mica)(obligatorio)\n"
        "- esquema nacional de seguridad (si se exige, nivel requerido)(obligatorio)\n"
        "- equipo de trabajo (n√∫mero de personas, requisitos, formaci√≥n, experiencia)\n"
        "- acreditaci√≥n del equipo de trabajo (c√≥mo se debe demostrar el equipo de trabajo)\n"
        "Texto:\n{document}\n\n"
        "Devuelve solo el JSON, sin texto adicional."
    )
)

# Prompt para consolidar respuestas parciales
prompt_template_final = PromptTemplate(
    input_variables=["partial_json"],
    template=(
        "Se han extra√≠do m√∫ltiples respuestas parciales de una licitaci√≥n en JSON. "
        "Fusiona todas en un √∫nico JSON limpio y completo con los siguientes campos:\n"
        "- n√∫mero de expediente\n"
        "- cliente (√≥rgano de contrataci√≥n)\n"
        "- clasificaci√≥n CPV\n"
        "- valor estimado del contrato (con y sin IVA)\n"
        "- plazo de presentaci√≥n de la oferta (fecha l√≠mite)\n"
        "- criterios de valoraci√≥n\n"
        "- resumen trabajos o servicios a contratar\n"
        "- pr√≥rroga\n"
        "- requisitos de solvencia t√©cnica\n"
        "- acreditaci√≥n de solvencia t√©cnica\n"
        "- requisitos de solvencia econ√≥mica\n"
        "- acreditaci√≥n de solvencia econ√≥mica\n"
        "- esquema nacional de seguridad (si se exige, nivel requerido)(obligatorio)\n"
        "- equipo de trabajo\n"
        "- acreditaci√≥n del equipo de trabajo (c√≥mo se debe demostrar el equipo de trabajo)\n"
        "Reglas:\n"
        "1. Para los campos √∫nicos, usa la primera respuesta v√°lida.\n"
        "2. Para los campos extensos, genera un resumen claro y conciso, eliminando duplicados.\n"
        "3. Devuelve solo el JSON final, sin texto adicional.\n\n"
        "Respuestas parciales:\n{partial_json}"
    )
)


# ==========================================
# FUNCI√ìN PRINCIPAL
# ==========================================

def extract_licitacion_data(carpeta_licitacion: str) -> dict:
    """
    Extrae informaci√≥n de todos los PDFs de una licitaci√≥n usando chunking y consolidaci√≥n.
    """
    print(f"üìÅ Procesando carpeta: {carpeta_licitacion}")
    
    # 1Ô∏è‚É£ Extraer texto completo de todos los PDFs
    texto = extraer_texto_pdfs(carpeta_licitacion)
    
    # 2Ô∏è‚É£ Dividir en chunks
    chunks = dividir_en_chunks(texto)
    print(f"üìö Dividido en {len(chunks)} chunks.")

    respuestas_parciales = []

    # 3Ô∏è‚É£ Analizar cada chunk
    for i, chunk in enumerate(chunks, 1):
        print(f"ü§ñ Analizando chunk {i}/{len(chunks)}...")
        try:
            prompt = prompt_template_chunk.format(document=chunk)
            response = llm.invoke(prompt)
            raw_output = response.content if hasattr(response, "content") else str(response)
            clean_output = raw_output.strip().replace("```json", "").replace("```", "").strip()

            if clean_output:
                try:
                    data = json.loads(clean_output)
                    respuestas_parciales.append(data)
                except Exception as e:
                    print(f"‚ö†Ô∏è Error parsing JSON chunk {i}: {e}")
            else:
                print(f"‚ö†Ô∏è Chunk {i} vac√≠o, se omite.")

        except Exception as e:
            print(f"‚ö†Ô∏è Error analizando chunk {i}: {e}")

    # 4Ô∏è‚É£ Consolidar respuestas parciales
    if respuestas_parciales:
        try:
            partial_json_str = json.dumps(respuestas_parciales)
            prompt_final = prompt_template_final.format(partial_json=partial_json_str)
            response_final = llm.invoke(prompt_final)
            raw_final = response_final.content if hasattr(response_final, "content") else str(response_final)
            clean_final = raw_final.strip().replace("```json", "").replace("```", "").strip()
            if clean_final:
                try:
                    resultado_final = json.loads(clean_final)
                except Exception as e:
                    print(f"‚ö†Ô∏è Error parsing JSON final: {e}")
                    resultado_final = combinar_respuestas(respuestas_parciales)
            else:
                resultado_final = combinar_respuestas(respuestas_parciales)
        except Exception as e:
            print(f"‚ö†Ô∏è Error consolidando respuestas: {e}")
            resultado_final = combinar_respuestas(respuestas_parciales)
    else:
        print(f"‚ö†Ô∏è No se pudieron extraer datos de la licitaci√≥n {carpeta_licitacion}")
        resultado_final = {"nombre_carpeta": os.path.basename(carpeta_licitacion)}

    # 5Ô∏è‚É£ Siempre agregar nombre de la carpeta
    resultado_final["nombre_carpeta"] = os.path.basename(carpeta_licitacion)
    
    return resultado_final
